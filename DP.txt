----------------------------------------------------------UNBOUNDED KNAPSACK------------------------------------------------------------------------------------


/* THE NUMBER OF COMBINATIONS THAT MAKE UP THAT AMOUNT*/
		Base Cases:
Idea:
		if amount=0 then just return empty set to make the change, so 1 way to make the change.
		if no coins given, 0 ways to change the amount.
		Rest of the cases:

		For every coin we have an option to include it in solution or exclude it.
		check if the coin value is less than or equal to the amount needed, 
		if yes then we will find ways by including that coin and excluding that coin.
		Include the coin: reduce the amount by coin value and use the sub problem solution (amount-v[i]).
		Exclude the coin: solution for the same amount without considering that coin.

Recursive using include and exclude way:

		class Solution {
			public int change(int amount, int[] coins) {
				return change(amount, coins, 0);
			}
			
			private static int change(int amount, int[] coins, int i) {
			  if (amount < 0) return 0; // if amount is negative by which means not valid - 0
			  if (amount == 0) return 1; // we found exact change
			  if (i == coins.length && amount > 0) return 0; // means coins over and n>0 so no solution
			  return change(amount - coins[i], coins, i) + change(amount, coins, i + 1); // include + exclude
			}
		}

1st--->
        class Solution {
		public:
			int change(int amt, vector<int>& coin) {
				int n=coin.size();
				int dp[n+1][amt+1];
				
				for(int i=0;i<=n;i++)
				{
					for(int j=0;j<=amt;j++)
					{
						if(j==0) dp[i][j]=1;
						else if(i==0) dp[i][j]=0;
					}
				}
				
				 for(int i=1;i<=n;i++)
				{
					for(int j=1;j<=amt;j++)
					{
						if(coin[i-1]<=j)
							dp[i][j]=dp[i][j-coin[i-1]]+dp[i-1][j];
						else
						  dp[i][j]= dp[i-1][j];
					}
				}
				return dp[n][amt];
			}
		};
2nd--->
		class Solution {
		public:
			int change(int amt, vector<int>& coin) {
				int n=coin.size();
				int dp[amt+1];
				memset(dp, 0, sizeof(dp));
				
				dp[0]=1;
				 for(int i=0;i<n;i++)
				{
				   
				  for(int j=coin[i];j<=amt;j++) //for each n coins
						dp[j]+=dp[j-coin[i]];
				   
				}
			   
				return dp[amt];
			}
		};
/*RETURN THE FEWEST NUMBER OF COINS THAT YOU NEED TO MAKE UP THAT AMOUNT*/
    class Solution {
		public:
			int coinChange(vector<int>& coins, int amt) {
			
				 int dp[amt+1];
				 dp[0]=0;
				 sort(coins.begin(),coins.end(),greater<>());
				  for(int i=1;i<=amt;i++)
				  {
					  dp[i]=INT_MAX;
					  for(auto c: coins)
					  {
						  if(c<=i) {
						 if(dp[i-c]!=INT_MAX) dp[i]=min(dp[i],1+dp[i-c]);}
					  }
					  
				  }
				return dp[amt]==INT_MAX? -1 : dp[amt];
			   
			}
		};
		
/*MAXIMIZE THE CUT SEGMENTS*/ 	
		int maximizeTheCuts(int n, int x, int y, int z)
		{
		   int a[3];
		   a[0]=x, a[1]=y, a[2]=z;
		   int dp[n+1];
		   dp[0]=0;
		   for(int i=1;i<=n;i++)
		   {
			   dp[i]=INT_MIN;
			   for(int j=0;j<3;j++)
			   {
				   if(i>=a[j])
				   {
					   if (dp[i - a[j]] != INT_MIN)
							dp[i] = max(dp[i], 1 + dp[i - a[j]]);
							// cut of rode ith length is max; 
				   }
			   }
		   }
				  return dp[n]==INT_MIN? 0 : dp[n];

		}
		
		vector<string> justifyNewspaperText(vector<vector<string>> paragraphs, vector<string> aligns, int width) {
vector<string>  ans;
string k;
    for(int j=0;j<=width+1;j++){
        k+='*';
    }
    ans.push_back(k);
    for(int i=0;i<paragraphs.size();i++)
    {
       string q="";
       string l="";
       if(aligns[i]=="RIGHT") l+="*";
       
             for(int j=0;j<paragraphs[i].size();j++)
             {
                if(q.size()+paragraphs[i][j].size()<=width){
                    q+=paragraphs[i][j];
                    if(q.size()+paragraphs[i][j+1].size()<=width)q+=" ";
                }
                else{
                    if(aligns[i]=="LEFT"){
                        string z="*";
                        z+=q;
                        int p=width-q.size();
                        for(int k=0;k<p;k++) z+=" ";
                        z+='*';
                        ans.push_back(z);
                        
                    }
                    else {
                        int p=width-q.size();
                        for(int k=0;k<p;k++) l+=" ";
                        l+=q; l+='*';
                        ans.push_back(l); 
                    }
                    q="";
                    if(aligns[i]=="LEFT") l="*";
                    
                }
                
                if(j==paragraphs[i].size()-1)
                {
                    if(aligns[i]=="LEFT"){
                        string z="*";
                        z+=q;
                        int p=width-q.size();
                        for(int k=0;k<p;k++) z+=" ";
                        z+='*';
                        ans.push_back(z);
                        
                    }
                    else {
                        int p=width-q.size();
                        for(int k=0;k<p;k++) l+=" ";
                        l+=q; l+='*';
                        ans.push_back(l); 
                    }
                }
           
             }
    }
   
    ans.push_back(k);
    return ans;

}
